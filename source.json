{
"config/composer.php" : "<?php\r\n\/\/require_once 'bootstrap.php';\r\n\/\/require_once 'config' . DIRECTORY_SEPARATOR . 'config.php';\r\n\r\n\/\/die(var_dump(get_defined_constants(true)['user'], false)); \/\/ get_defined_constants(true) or die('get_defined_constants() failed.');\r\n\/\/dd(get_required_files());\r\n\/\/dd(PHP_EXEC);\r\n\r\nuse PHPUnit\\Event\\Code\\Throwable;\r\n\/*\r\n{\r\n  \"autoload\": {\r\n      \"psr-4\": {\r\n          \"App\\\\\": \"src\/\"\r\n      } ...\r\n      \"classmap\": [\r\n            \"src\/\"\r\n      ] ...\r\n      \"files\": [\r\n            \"src\/helpers.php\",\r\n            \"src\/constants.php\"\r\n      ]\r\n  }\r\n}\r\n*\/\r\n\r\n$a = $b = 'string';\r\n\/\/echo is_bool($b === 0);\r\n\r\n\/\/ini_set('assert.exception', 1);\r\n\r\n\/\/ini_get('assert.exception') or ini_set('assert.exception', 1);\r\n\r\n\/\/dd(ini_get('assert.exception') or die('assert.exception is not set: ' . (bool) ini_get('assert.exception')));\r\n\r\n\/* PHP Assertion Exception Handling *\/\r\n\r\nglobal $errors;\r\n\r\n\/\/ include 'constants.php';\r\n\r\n\/\/dd(get_required_files(), false);\r\n\r\n\/\/if ($_SERVER['REQUEST_METHOD'] == 'POST') \r\n\/\/  die(var_dump($_GET));\r\n\r\nuse Composer\\InstalledVersions;\r\n\r\nif (isset($_ENV['COMPOSER']['EXPR_NAME']) && !defined('COMPOSER_EXPR_NAME'))\r\n  define('COMPOSER_EXPR_NAME', $_ENV['COMPOSER']['EXPR_NAME']); \/\/ const COMPOSER_EXPR_NAME = 'string only\/non-block\/ternary';\r\n\/\/elseif (!defined('COMPOSER_EXPR_NAME'))\r\n\/\/define('COMPOSER_EXPR_NAME', '\/([a-z0-9](?:[_.-]?[a-z0-9]+)*)\\\/([a-z0-9](?:(?:[_.]|-{1,2})?[a-z0-9]+)*)\/'); \/\/ name\r\n\r\nif (isset($_ENV['COMPOSER']['EXPR_VER']) && !defined('COMPOSER_EXPR_VER'))\r\n  define('COMPOSER_EXPR_VER', $_ENV['COMPOSER']['EXPR_VER']); \/\/ const COMPOSER_EXPR_VER = 'string only\/non-block';\r\nelseif (!defined('COMPOSER_EXPR_VER'))\r\n  define('COMPOSER_EXPR_VER', '\/v?\\d+(?:\\.\\d+){0,3}|dev-.*\/'); \/\/ name\r\n\r\n\/\/composer config --global --auth --unset github-oauth.github.com\r\n\/\/composer config --global github-oauth.github.com __TOKEN__\r\n\/\/putenv('COMPOSER_use-github-api=true');\r\n\/\/putenv('COMPOSER_github-oauth.github.com=BAM');\r\n\r\n\/\/ php -d xdebug.remote_enable=0 composer\r\n\/\/ php -d xdebug.remote_enable=0 composer <your_command_here>\r\n\/\/ -d xdebug.remote_enable=0 \\\r\n\/\/ -d xdebug.profiler_enable=0 \\\r\n\/\/ -d xdebug.profiler_output_dir=. \\\r\n\/\/ -d xdebug.default_enable=0\r\n\r\n\/\/ php -dxdebug.mode=debug -dxdebug.output_dir=. public\/ui_complete.php\r\n\r\n\/*\r\nforeach ($array = preg_split(\"\/\\r\\n|\\n|\\r\/\", exec(APP_SUDO  . -u www-data \/usr\/local\/bin\/composer diagnose')) as $key => $diag_line) {\r\n  dd($diag_line, false);\r\n}\r\n*\/\r\n\r\n\/\/ '(win) set VARIABLE \/ (linux\/macos) export VARIABLE '\r\n\r\nconst COMPOSER_DISABLE_NETWORK = 1;\r\nputenv('COMPOSER_DISABLE_NETWORK=' . (bool) COMPOSER_DISABLE_NETWORK);\r\n\r\nconst COMPOSER_ALLOW_SUPERUSER = true;\r\nputenv('COMPOSER_ALLOW_SUPERUSER=' . (bool) COMPOSER_ALLOW_SUPERUSER); \/\/dd(getenv('COMPOSER_ALLOW_SUPERUSER'));\r\n\r\nconst COMPOSER_ALLOW_XDEBUG = false; \/\/ didn't work\r\nputenv('COMPOSER_ALLOW_XDEBUG=' . (bool) COMPOSER_ALLOW_XDEBUG);\r\n\r\nputenv('COMPOSER_DISABLE_XDEBUG_WARN=' . (bool) true);\r\n\r\nclass ComposerConfig\r\n{\r\n  private $name;\r\n  private $version;\r\n  private $description;\r\n\r\n  \/\/ Properties initialized with default values\r\n  private $type = '';\r\n  private $keywords = [];\r\n  private $homepage = '';\r\n  private $readme = '';\r\n  private $time = '';\r\n  private $license = '';\r\n  private $authors = [];\r\n  private $repositories = [];\r\n  private $require;\r\n  private $requireDev;\r\n  private $autoload;\r\n  private $autoloadDev;\r\n  private $minimumStability = '';\r\n  private $preferStable = false;\r\n  private $config;\r\n\r\n  public function __construct($config = ['name' => 'default', 'version' => '1.0.0', 'description' => 'Default description'])\r\n  {\r\n    $this->name = $config['name'] ?? 'default';\r\n    $this->version = $config['version'] ?? '1.0.0';\r\n    $this->description = $config['description'] ?? 'Default description';\r\n\r\n    \/\/ Initialize all other required properties with defaults\r\n    $this->initializeProperties();\r\n  }\r\n\r\n  private function initializeProperties()\r\n  {\r\n    \/\/ Default configurations for properties with specific types or nested structures\r\n    $this->require = new stdClass();\r\n    $this->requireDev = new stdClass();\r\n    $this->autoload = new stdClass();\r\n    $this->autoloadDev = new stdClass();\r\n    $this->repositories = [];\r\n\r\n    $this->authors[] = (object) [\r\n      'name' => $_ENV['COMPOSER']['AUTHOR'] ?? 'Default Author',\r\n      'email' => $_ENV['COMPOSER']['EMAIL'] ?? 'author@example.com'\r\n    ];\r\n\r\n    $this->config = (object) [\r\n      'platform-check' => false,\r\n      'platform' => (object) ['php' => '7.4.0']\r\n    ];\r\n  }\r\n\r\n  public function toArray(): array\r\n  {\r\n    return [\r\n      'name' => $this->name,\r\n      'version' => $this->version,\r\n      'description' => $this->description,\r\n      'type' => $this->type,\r\n      'keywords' => $this->keywords,\r\n      'homepage' => $this->homepage,\r\n      'readme' => $this->readme,\r\n      'time' => $this->time,\r\n      'license' => $this->license,\r\n      'authors' => $this->authors,\r\n      'repositories' => $this->repositories,\r\n      'require' => $this->require,\r\n      'require-dev' => $this->requireDev,\r\n      'autoload' => $this->autoload,\r\n      'autoload-dev' => $this->autoloadDev,\r\n      'minimum-stability' => $this->minimumStability,\r\n      'prefer-stable' => $this->preferStable,\r\n      'config' => $this->config\r\n    ];\r\n  }\r\n\r\n  \/\/ Add getter methods for each property\r\n  public function getName()\r\n  {\r\n    return $this->name;\r\n  }\r\n\r\n  public function getVersion()\r\n  {\r\n    return $this->version;\r\n  }\r\n\r\n  public function getDescription()\r\n  {\r\n    return $this->description;\r\n  }\r\n\r\n  \/*\r\n    setProperty \u2013 Set or update a specific property in the configuration.\r\n    addAuthor \u2013 Add an author to the authors array.\r\n    addRepository \u2013 Add a repository to the repositories array.\r\n    addRequirement \u2013 Add a requirement to require or require-dev.\r\n    setAutoload \u2013 Configure autoload settings.\r\n    validateConfig \u2013 Check if required fields are set and valid.\r\n    toArray \u2013 Convert the config object to an array format.\r\n    toJson \u2013 Convert the config to a JSON string.\r\n    saveToFile \u2013 Save the JSON output to a file.\r\n    loadFromFile \u2013 Load configuration data from a JSON file.\r\n    mergeConfig \u2013 Merge additional configurations or override existing values.\r\n    resetConfig \u2013 Reset properties to default values.\r\n  *\/\r\n}\r\n\r\nclass composerSchema\r\n{\r\n  public $name;\r\n  public $description;\r\n  public $version;\r\n  public $type;\r\n  public $keywords;\r\n  public $homepage;\r\n  public $readme;\r\n  public $time; \/\/date('Y-m-d H:i:s');\r\n  public $license;\r\n  public $authors;\r\n  public $repositories;\r\n  public $require;\r\n  \/\/public $require_dev;  \/\/ using {'require-dev'}\r\n  public $autoload;\r\n  \/\/public $autoload_dev;  \/\/ using {'autoload-dev'}\r\n\r\n  \/**\r\n   *\/\r\n  public function __construct()\r\n  {\r\n  }\r\n}\r\n\r\nif (is_file($include = APP_PATH . APP_ROOT . APP_BASE['vendor'] . 'autoload.php')) {\r\n  if (!empty(APP_ROOT) || isset($_GET['app']) && $_GET['app'] === 'composer')\r\n    require_once $include;\r\n  else if (isset($_ENV['COMPOSER']['AUTOLOAD']) && (bool) $_ENV['COMPOSER']['AUTOLOAD'] === TRUE)\r\n    require_once $include;\r\n} else\r\n  $errors['COMPOSER_AUTOLOAD'] = \"Composer autoload is disabled.\\n\";\r\n\r\nif (!defined('APP_PATH_CONFIG') || !in_array(APP_PATH_CONFIG, get_required_files()))\r\n  die(APP_PATH_CONFIG . ' is missing. Presumed that this file was opened on its own.');\r\n\r\nif (!function_exists('get_declared_classes')) {\r\n  $autoloadContent = file_get_contents($include);\r\n  if (!preg_match('\/class\\s+ComposerAutoloaderInit([a-f0-9]+)\/', $autoloadContent, $matches))\r\n    $errors['COMPOSER-AutoloaderInit'] = 'ComposerAutoloaderInit failed to be matched. Check for autoload.php\\n';\r\n} else if (!empty($classes = get_declared_classes())) {\r\n  foreach ($classes as $key => $class) {\r\n    if (preg_match('\/(ComposerAutoloaderInit[a-f0-9]+)\/', $class, $matches))\r\n      break;\r\n    if ($class == end($classes))\r\n      $errors['COMPOSER-AutoloaderInit'] = \"ComposerAutloaderInit2 failed to be matched. Check for autoload.php\\n\";\r\n\r\n    \/\/ composer dump-autoload\r\n  }\r\n  \/*\r\n  Check oauth github\r\n  Check vendor folder exists and\/or empty\r\n  composer\/InstalledVersions.php\r\n  *\/\r\n\r\n}\r\n\r\nif (isset($matches[1])) {\r\n  define('COMPOSER_AUTOLOADERINIT', $matches[1]); \/\/ no dashes\r\n\r\n  $classesFound = [];\r\n  $foundKey = false; \/\/ Flag to indicate if key 179 has been found\r\n  foreach ($classes as $key => $class) {\r\n    if ($foundKey) {\r\n      \/\/ Now $key is the key and $item is the value\r\n      \/\/echo \"$key => $class\\n\"; \/\/ Print key-value pair\r\n      $classesFound[] = $class;\r\n    }\r\n    if (preg_match('\/' . COMPOSER_AUTOLOADERINIT . '\/', $class)) {\r\n      $classesFound[] = $class;\r\n      $foundKey = true; \/\/ Set the flag to true once key 179 is found\r\n    }\r\n  }\r\n}\r\n\r\n$loadedLibraries = [];\r\n\r\n\/\/ Load a library\r\nif (class_exists(Composer\\Autoload\\ClassLoader::class)) {\r\n  $loadedLibraries[] = 'Composer\\Autoload\\ClassLoader';\r\n}\r\n\r\n\/\/ Check if a library is loaded\r\nif (in_array(Composer\\Autoload\\ClassLoader::class, $loadedLibraries)) {\r\n  \/\/ The library is loaded\r\n\/\/  echo 'Library found.';\r\n  \/\/$loadedLibraries;\r\n\r\n  if (class_exists(\"Composer\\\\InstalledVersions\")) {\r\n    $installedPackages = Composer\\InstalledVersions::getInstalledPackages();\r\n    \/\/ Process $installedPackages as needed\r\n  } else {\r\n    $errors['COMPOSER_INSTALLEDVERSIONS'] = \"The class Composer\\\\InstalledVersions is not found. Please check your Composer setup.\";\r\n  }\r\n}\r\n\r\n$vendors = [];\r\n\r\n\/\/ Print information about each package\r\nif (isset($installedPackages) && !empty($installedPackages)) {\r\n  foreach ($installedPackages as $key => $package) { \/\/\r\n    if (preg_match(COMPOSER_EXPR_NAME, $package, $matches))\r\n      $vendors[$key] = $matches[1];\r\n  }\r\n\r\n  $uniqueVendors = array_unique($vendors);\r\n\r\n  foreach ($installedPackages as $key => $package) { \/\/\r\n    if (preg_match(COMPOSER_EXPR_NAME, $package, $matches))\r\n      $uniqueVendors[$matches[1]][] = $matches[2];\r\n    unset($uniqueVendors[$key]);\r\n  }\r\n\r\n  define('COMPOSER_VENDORS', $uniqueVendors);\r\n}\r\n\r\n\/*\r\n  Must be defined before the composer-setup.php can be preformed.\r\n*\/\r\n\r\n$composerUser = $_ENV['COMPOSER']['VENDOR'] ?? '';\r\n$componetPkg = $_ENV['COMPOSER']['PACKAGE'] ?? '';\r\n$user = getenv('USERNAME') ?? getenv('APACHE_RUN_USER') ?? getenv('USER') ?? '';\r\n\r\n\/\/ Determine the Composer home path based on the OS and user\r\n$composerHome = (stripos(PHP_OS, 'WIN') === 0) ? \"C:\/Users\/$user\/AppData\/Roaming\/Composer\/\" : ($user === 'root' ? '\/root\/.composer\/' : APP_PATH . '.composer\/');\r\n\r\nif (!realpath($composerHome) && @!mkdir($composerHome, 0755, true)) {\r\n  $errors['COMPOSER_HOME'] = \"$composerHome does not exist. Path: $composerHome\\n\";\r\n}\r\ndefine('COMPOSER_HOME', $composerHome);\r\n\r\n\/\/dd('Composer Home: ' . $composerHome, 0);\r\n\r\nputenv(\"COMPOSER_HOME=$composerHome\" ?? $_SERVER['HOME'] . '\/.composer\/'); \/\/ \/var\/www\r\n\r\nif (!file_exists(APP_PATH . 'composer.phar')) {\r\n  copy('https:\/\/getcomposer.org\/installer', 'composer-setup.php');\r\n\r\n  $error = shell_exec($_ENV['PHP']['EXEC'] . ' composer-setup.php'); \/\/ php -d register_argc_argv=1\r\n\r\n  $errors['COMPOSER-PHAR'] = 'Composer setup was executed and ' . (file_exists(APP_PATH . 'composer.phar') ? 'does' : 'does not') . ' exist.';\r\n\r\n  \/\/defined('PHP_EXEC') ? $errors['COMPOSER-PHAR'] .= ' version='. shell_exec(PHP_EXEC . ' composer.phar -V') . '  error=' . $error : '';\r\n} else\r\n\r\n  \/\/if (preg_match('\/Composer(?: version)? (\\d+\\.\\d+\\.\\d+) (\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\/', exec(($bin = 'php composer.phar') . ' -V'), $matches))\r\n  \/\/  define('COMPOSER_PHAR', ['bin' => $bin, 'version' => $matches[1], 'date' => $matches[2]]);\r\n\r\n\r\n  if (stripos(PHP_OS, 'WIN') === 0) { \/\/ DO NOT REMOVE! { .. }\r\n    \/\/ Check if PHP is in the system's PATH and executable\r\n    $phpCheckOutput = null;\r\n    $phpCheckResult = null;\r\n\r\n    defined('PHP_EXEC') ? exec(PHP_EXEC . ' -v', $phpCheckOutput, $phpCheckResult) : exec('php -v', $phpCheckOutput, $phpCheckResult);\r\n\r\n    if ($phpCheckResult !== 0) {\r\n      $errors['PHP_PATH'] = 'PHP is not within the system\\'s PATH or is not executable.';\r\n      !defined('COMPOSER_PHAR') and define('COMPOSER_PHAR', ['bin' => PHP_EXEC . 'composer.phar', 'version' => null, 'date' => null]);\r\n      !defined('COMPOSER_BIN') && defined('COMPOSER_PHAR') and define('COMPOSER_BIN', COMPOSER_PHAR);\r\n    } else {\r\n      \/\/ Check if Composer is installed and accessible\r\n      if (file_exists('C:\\ProgramData\\ComposerSetup\\bin\\composer.phar')) {\r\n        if (\r\n          preg_match(\r\n            '\/Composer(?: version)? (\\d+\\.\\d+\\.\\d+) (\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\/',\r\n            exec($bin = \"php C:\\\\ProgramData\\\\ComposerSetup\\\\bin\\\\composer.phar -V\"),\r\n            $matches\r\n          )\r\n        ) {\r\n          !defined('COMPOSER_PHAR') and define('COMPOSER_PHAR', ['bin' => $bin, 'version' => $matches[1], 'date' => $matches[2]]);\r\n          !defined('COMPOSER_BIN') && defined('COMPOSER_PHAR') and define('COMPOSER_BIN', COMPOSER_PHAR);\r\n        }\r\n      } else {\r\n        if (\r\n          preg_match(\r\n            '\/Composer(?: version)? (\\d+\\.\\d+\\.\\d+) (\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\/',\r\n            exec($bin = \"php C:\\\\www\\\\composer.phar -V\"),\r\n            $matches\r\n          )\r\n        ) {\r\n          !defined('COMPOSER_PHAR') and define('COMPOSER_PHAR', ['bin' => 'composer.phar', 'version' => $matches[1], 'date' => $matches[2]]);\r\n          !defined('COMPOSER_BIN') && defined('COMPOSER_PHAR') and define('COMPOSER_BIN', COMPOSER_PHAR);\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n\r\n    \/\/if (file_exists(APP_PATH . 'composer.phar'))\r\n    \/\/define('COMPOSER_PHAR', ['bin' => 'php composer.phar', version => '1.0.0']);\r\n\/*\r\n  if (file_exists(APP_PATH . 'composer.phar')) {\r\n    define('COMPOSER_PHAR', (file_exists(APP_PATH . 'composer.phar') ? APP_PATH . 'composer.phar' : '\/usr\/bin\/composer'));\r\n    define('COMPOSER_BIN', '\/usr\/bin\/composer');\r\n  } elseif (file_exists('\/usr\/local\/bin\/composer')) {\r\n    define('COMPOSER_PHAR', (file_exists(APP_PATH . 'composer.phar') ? APP_PATH . 'composer.phar' : '\/usr\/local\/bin\/composer'));\r\n    define('COMPOSER_BIN', '\/usr\/local\/bin\/composer');\r\n  }\r\n*\/\r\n    \/\/defined('COMPOSER_EXEC')\r\n    realpath($composer_which = trim(shell_exec((defined('APP_SUDO') ? APP_SUDO . '-u www-data ' : '') . 'which composer') ?? '')) or $errors['COMPOSER-WHICH'] = \"which did not find composer. Err={}\" . $composer_which = '\/usr\/local\/bin\/composer';\r\n\r\n    foreach ([basename(PHP_EXEC) . ' ' . APP_PATH . 'composer.phar', $composer_which] as $key => $bin) {\r\n      !isset($composer) and $composer = [];\r\n      \/*\/\/*\/\r\n      if (isset($bin) && preg_match('\/^php.*composer\\.phar$\/', $bin))\r\n        !defined('COMPOSER_PHAR') and define('COMPOSER_PHAR', ['bin' => PHP_EXEC . \" $bin\"]);\r\n      else {\r\n\r\n        $proc = proc_open('env COMPOSER_ALLOW_SUPERUSER=' . COMPOSER_ALLOW_SUPERUSER . '; ' . (stripos(PHP_OS, 'WIN') !== 0 && defined('APP_SUDO') ? APP_SUDO : '') . defined('COMPOSER_BIN') ? 'composer' : COMPOSER_BIN . ' --version;', [[\"pipe\", \"r\"], [\"pipe\", \"w\"], [\"pipe\", \"w\"]], $pipes);\r\n\r\n        $stdout = stream_get_contents($pipes[1]);\r\n        $stderr = stream_get_contents($pipes[2]);\r\n\r\n        $exitCode = proc_close($proc);\r\n\r\n        if (preg_match('\/Composer(?: version)? (\\d+\\.\\d+\\.\\d+) (\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\/', $stdout, $matches)) {\r\n          $composer[$key]['bin'] = $bin;\r\n          (!isset($matches[1]) ?: $composer[$key]['version'] = $matches[1]);\r\n          (!isset($matches[2]) || is_bool($matches[2]) ?: $composer[$key]['date'] = $matches[2]);\r\n        } else {\r\n          if (empty($stdout)) {\r\n            if (!empty($stderr))\r\n              $errors['COMPOSER_VERSION'] = $stderr;\r\n          } else\r\n            $errors['COMPOSER_VERSION'] = $stdout; \/\/ else $errors['COMPOSER_VERSION'] = $stdout . ' does not match $version'; }\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    usort($composer, function ($a, $b) {\r\n      return version_compare($b['version'], $a['version']); \/\/ Sort in descending order based on version\r\n    });\r\n\r\n\r\n    if (empty($composer))\r\n      $errors['COMPOSER-BIN'] = 'There are no composer binaries.';\r\n    else\r\n      foreach ($composer as $key => $exec) {\r\n        if ($key == 0 || $key == 1) {\r\n\r\n          !defined('COMPOSER_BIN') and define('COMPOSER_BIN', $exec);\r\n\r\n          continue; \/\/ !break 2-loops\r\n        } else\r\n          break;\r\n      }\r\n  }\r\n\r\n\/\/ dd(COMPOSER_PHAR, 0);\r\n\/\/ dd(COMPOSER_BIN, 0);\r\n\r\n\/\/\r\n\/\/exec('whoami', $output, $returnCode); \/\/ or $errors['COMPOSER-WHOAMI'] = $output;\r\n\/\/if (APP_DEBUG) {\r\n\r\n\/\/$output = [];\r\n$output = [ \/\/ Exception: [] operator not supported for strings\r\n  stripos(PHP_OS, 'WIN') === 0 ? realpath('C:\\\\composer\\\\composer.bat' \/*shell_exec('where composer')*\/)\r\n  : realpath(shell_exec((defined('APP_SUDO') ? APP_SUDO : '') . 'which composer') ?? ''),\r\n  shell_exec('composer --version') ?: $errors['COMPOSER-VERSION'] = ''\r\n];\r\n\r\nif (isset($output[0]))\r\n  if (stripos(PHP_OS, 'WIN') === 0) {\r\n    !preg_match('\/Composer(?: version)? (\\d+\\.\\d+\\.\\d+) (\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\/', $output[1], $matches) and\r\n      $errors['COMPOSER-VERSION'] = $output[1];\r\n  } else {\r\n    preg_match('\/Composer(?: version)? (\\d+\\.\\d+\\.\\d+) (\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\/', $output[1], $matches) or $errors['COMPOSER-VERSION'] = $output[1];\r\n  }\r\n\r\n\r\nif (!empty($matches))\r\n  defined('COMPOSER_EXEC') or define('COMPOSER_EXEC', (isset($_GET['exec']) && $_GET['exec'] == 'phar' ? COMPOSER_PHAR : (defined('COMPOSER_BIN') ? ['bin' => defined('COMPOSER_BIN') ? 'composer' : COMPOSER_BIN, 'version' => ($matches[1] ?? '')] : ['bin' => 'composer', 'version' => $matches[1]])) ?? COMPOSER_PHAR);\r\n\r\nif (defined('COMPOSER_EXEC') && is_array(COMPOSER_EXEC))\r\n  define('COMPOSER_VERSION', COMPOSER_EXEC['version'] ?? '1.0.0');\r\n\/\/else\r\n\/\/define('COMPOSER_VERSION', COMPOSER_PHAR['version']);\r\n\r\n$configJsonPath = COMPOSER_HOME . 'config.json';\r\n\r\nif (realpath(COMPOSER_HOME) && !file_exists($configJsonPath)) {\r\n  if (!touch($configJsonPath)) {\r\n    $errors['COMPOSER_CONFIG'] = \"$configJsonPath is unable to be created.\";\r\n  } else {\r\n    file_put_contents($configJsonPath, '{}');\r\n  }\r\n}\r\n\r\nif (is_file($configJsonPath)) {\r\n  define('COMPOSER_CONFIG', [\r\n    'json' => '{}',\r\n    'path' => $configJsonPath\r\n  ]);\r\n}\r\n\r\n$authJsonPath = COMPOSER_HOME . 'auth.json';\r\n\r\nif (realpath(COMPOSER_HOME) && !file_exists($authJsonPath)) {\r\n  if (!touch($authJsonPath)) {\r\n    $errors['COMPOSER_AUTH'] = \"$authJsonPath is unable to be created.\";\r\n  } else {\r\n    file_put_contents($authJsonPath, '{\"github-oauth\": {\"github.com\": \"\"}}');\r\n  }\r\n}\r\n\r\nif (is_file($authJsonPath)) {\r\n  putenv('COMPOSER_AUTH=' . (filesize($authJsonPath) == 0 || trim(file_get_contents($authJsonPath)) == false ? '{\"github-oauth\": {\"github.com\": \"\"}}' : trim(str_replace([' ', \"\\r\\n\", \"\\n\", \"\\r\"], '', file_get_contents($authJsonPath)))));\r\n\r\n  define('COMPOSER_AUTH', [\r\n    'json' => getenv('COMPOSER_AUTH'),\r\n    'path' => $authJsonPath,\r\n    'token' => json_decode(getenv('COMPOSER_AUTH')\/*, true *\/)->{'github-oauth'}->{'github.com'}\r\n  ]);\r\n} else\r\n  define('COMPOSER_AUTH', [\r\n    'json' => getenv('COMPOSER_AUTH'),\r\n    'path' => $authJsonPath\r\n  ]);\r\n\r\nif (is_file($authJsonPath) && COMPOSER_AUTH['token'] !== $_ENV['GITHUB']['OAUTH_TOKEN'] ?? 'static token') {\r\n  $errors['COMPOSER_TOKEN'] = \"COMPOSER_TOKEN does not match the GITHUB\/OAUTH_TOKEN\\n\";\r\n  if (isset($errors['COMPOSER_TOKEN']))\r\n    file_put_contents($authJsonPath, '{\"github-oauth\": {\"github.com\": \"' . $_ENV['GITHUB']['OAUTH_TOKEN'] . '\"}}');\r\n} else {\r\n  putenv('COMPOSER_TOKEN=' . (COMPOSER_AUTH['token'] ?? 'static token')); \/\/ <GITHUB_ACCESS_TOKEN>\r\n}\r\n\r\n\/\/ dd(COMPOSER_AUTH['token'] . '   ' . $_ENV['GITHUB']['OAUTH_TOKEN']);\r\n\r\nputenv('PWD=' . APP_PATH . APP_ROOT);\r\n\r\n\/\/dd(file_get_contents($authJsonPath)); \/\/ json_decode(getenv('COMPOSER_AUTH') ?? file_get_contents($authJsonPath) \/*, true *\/)\r\n\r\n\/*\r\n  This section of code will need to correspond to a project\r\n  \r\n    A project file will need to look for first, and then look for the applications' composer.json\r\n    \r\n       Can a constant be a object, or does an object need to be able to write to itself ...\r\n     \r\n       If !defined(COMPOSER_JSON) and define('COMPOSER_JSON', APP_PATH . '\/composer.json');\r\n*\/\r\n\r\n\/* library, project, metapackage, composer-plugin ... Package type *\/\r\nif (defined('COMPOSER_EXEC'))\r\n  $composer_exec = defined('COMPOSER_PHAR') && COMPOSER_EXEC['bin'] == COMPOSER_PHAR['bin'] ? COMPOSER_PHAR['bin'] : COMPOSER_EXEC['bin'];\r\n\r\n\/*\r\nAPP_WORK[client]\r\n\r\nAPP_CLIENT \/ APP_PROJECT APP_ {key(APP_WORK)}\r\n  [path]\r\n  [user]\r\n*\/\r\n\r\nif (defined('APP_ENV') and APP_ENV == 'development') {\r\n  if (defined('APP_CLIENT') && is_object(APP_CLIENT))\r\n    $$c_or_p = APP_CLIENT;\r\n  else {\r\n    $c_or_p = 'client';\r\n    $$c_or_p = new stdClass();\r\n    $$c_or_p->path = APP_PATH;\r\n    $$c_or_p->name = 'www';\r\n    define('APP_CLIENT', $$c_or_p);\r\n  }\r\n\r\n  if (!isset($c_or_p) && !is_object($$c_or_p))\r\n    $errors['COMPOSER_CLIENT-PROJECT'] = '$c_or_p is not set. No project or client was selected. Using APP as client.';\r\n  else {\r\n    \/\/die('test');\r\n\r\n    ob_start();\r\n    echo $composer_exec; ?> init --quiet --no-interaction\r\n    --working-dir=\"<?= APP_PATH . APP_ROOT; ?>\"\r\n    --name=\"<?= $composerUser . '\/' . $$c_or_p->name; ?>\"\r\n    --description=\"General Description\"\r\n    --author=\"Barry Dick <barryd.it@gmail.com>\"\r\n      --type=\"project\"\r\n      --homepage=\"https:\/\/github.com\/<?= $composerUser . '\/' . $$c_or_p->name; ?>\"\"\r\n      --require=\"php:^7.4||^8.0\"\r\n      --require=\"composer\/composer:^1.0\"\r\n      --require-dev=\"pds\/skeleton:^1.0\"\r\n      --stability=\"dev\"\r\n      --license=\"WTFPL\"\r\n      <?php\r\n      defined('COMPOSER_INIT_PARAMS')\r\n        or define('COMPOSER_INIT_PARAMS', \/*<<<TEXT TEXT*\/ ob_get_contents());\r\n      ob_end_clean();\r\n\r\n      if (!is_dir($$c_or_p->path . APP_BASE['vendor']))\r\n        $errors['COMPOSER_INIT-VENDOR'] = 'Failed to create the vendor\/ directory. If you are seeing this. An error has occured.';\r\n\r\n      \/\/@mkdir($$c_or_p->path . 'vendor');\r\n  \r\n\r\n      \/\/ composer init --require=twig\/twig:1.13.* -n   \/\/ https:\/\/webrewrite.com\/create-composer-json-file-php-project\/\r\n  \r\n      \/\/ composer init --quiet --no-interaction --working-dir=\"{$$c_or_p->path}\" --require=php:^7.4|^8.0\r\n  \r\n      \/\/ --require-dev=\"phpunit\/phpunit:^9.5.20\"\r\n\/\/ --autoload=\"src\/\"\r\n      if (file_exists(APP_PATH . APP_ROOT . 'composer.json')) {\r\n\r\n        \/\/ clean up json -- preg_replace('\/[\\x00-\\x1F\\x80-\\xFF]\/', '', str_replace('\\\\', '\\\\\\\\', '{...}'))\r\n  \r\n        \/\/($err = json_decode(str_replace('\\\\', '\\\\\\\\', file_get_contents($$c_or_p->path . 'composer.json')), null, 512, JSON_THROW_ON_ERROR)) and $error['COMPOSER-JSON'] = 'Invalid JSON: ' . $err;\r\n  \r\n        if (!defined('COMPOSER_JSON'))\r\n          define('COMPOSER_JSON', ['json' => file_get_contents(APP_PATH . APP_ROOT . 'composer.json'), 'path' => APP_PATH . APP_ROOT . 'composer.json']);\r\n\r\n      } else {\r\n        \/\/ php composer.phar init\r\n  \r\n        \/\/ \/usr\/share\/php\/Symfony\/Component\/Console\/Helper\/HelperSet.php\r\n        \/\/ Deprecated: Return type of Symfony\\Component\\Console\\Helper\\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator()\r\n        \/\/ Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice in \/usr\/share\/php\/Symfony\/Component\/Console\/Helper\/HelperSet.php on line 103\r\n  \r\n        \/\/ 'COMPOSER_BIN init' >> Symfony\\Component\\Console\\Helper\\...\r\n\/*  This code would be used to create \r\n  $proc = proc_open('env COMPOSER_ALLOW_SUPERUSER=' . COMPOSER_ALLOW_SUPERUSER . '; ' . (stripos(PHP_OS, 'WIN') === 0 ? '' : APP_SUDO) . COMPOSER_INIT_PARAMS, array( array(\"pipe\",\"r\"), array(\"pipe\",\"w\"), array(\"pipe\",\"w\")), $pipes);\r\n\r\n  $stdout = stream_get_contents($pipes[1]);\r\n  $stderr = stream_get_contents($pipes[2]);\r\n\r\n  $exitCode = proc_close($proc);\r\n\r\n  if (empty($stdout)) {\r\n    if (!empty($stderr))\r\n      $errors['COMPOSER_INIT'] = '$stdout is empty. $stderr = ' . $stderr;\r\n  } \/\/else $errors['COMPOSER_INIT'] = $stdout;\r\n\r\n  if (file_exists($$c_or_p->path . 'composer.json'))\r\n    define('COMPOSER_JSON', ['json' => file_get_contents($$c_or_p->path . 'composer.json'), 'path' => $$c_or_p->path . 'composer.json']);\r\n  else \r\n    if (!touch($$c_or_p->path . 'composer.json'))\r\n      $errors['COMPOSER-JSON'] = 'composer.json was unable to be created.';\r\n    else\r\n      file_put_contents($$c_or_p->path . 'composer.json', '{}');\r\n*\/\r\n      }\r\n  }\r\n\r\n  \/*\r\n    Suggested packages to be added later:\r\n      composer\/packagist\r\n      composer\/getcomposer.org\r\n  *\/\r\n\r\n  \/\/$errors['COMPOSER_JSON'] = 'COMPOSER_JSON constant\/object is not defined.';\r\n\r\n  \/*\r\n  if (file_exists($$c_or_p->path . '\/composer.json'))\r\n  (defined(strtoupper($c_or_p)) ??\r\n    defined('COMPOSER_JSON')\r\n      or define('COMPOSER_JSON', $$c_or_p->path . '\/composer.json')\r\n  );\r\n  else (@!touch($$c_or_p->path . '\/composer.json')? define('COMPOSER_JSON', $$c_or_p->path . '\/composer.json') : $erros['COMPOSER-JSON'] = 'composer.json was unable to be created.');\r\n  *\/\r\n} \/\/ else { }\r\ndefined('COMPOSER_JSON') or define('COMPOSER_JSON', [\r\n  'json' => (is_file(APP_ROOT . 'composer.json') ? file_get_contents(APP_ROOT . 'composer.json') : '{}'),\r\n  'path' => APP_PATH . APP_ROOT . 'composer.json'\r\n]);\r\n\r\nob_start();\r\necho $composer_exec; ?> init --quiet --no-interaction\r\n  --working-dir=\"<?= APP_PATH . APP_ROOT; ?>\"\r\n  --name=\"<?= $composerUser . '\/' . str_replace('.', '_', basename(APP_ROOT) ?? $componetPkg); ?>\"\r\n  --description=\"General Description\"\r\n  --author=\"Barry Dick &lt;barryd.it@gmail.com&gt;\"\r\n  --type=\"project\"\r\n  --homepage=\"https:\/\/github.com\/<?= $composerUser . '\/' . str_replace('.', '_', basename(APP_ROOT) ?? $componetPkg); ?>\"\r\n  --require=\"php:^7.4||^8.0\"\r\n  --require=\"composer\/composer:^1.0\"\r\n  --require-dev=\"pds\/skeleton:^1.0\"\r\n  --stability=\"dev\"\r\n  --license=\"WTFPL\"\r\n  <?php\r\n  defined('COMPOSER_INIT_PARAMS')\r\n    or define('COMPOSER_INIT_PARAMS', \/*<<<TEXT TEXT*\/ trim(ob_get_contents()));\r\n  ob_end_clean();\r\n\r\n  if (!realpath(APP_PATH . APP_ROOT . APP_BASE['vendor'])) {\r\n    exec(COMPOSER_INIT_PARAMS);\r\n  } elseif (!realpath(APP_PATH . APP_ROOT . APP_BASE['vendor'] . 'autoload.php')) {\r\n    exec((stripos(PHP_OS, 'WIN') === 0 ? '' : APP_SUDO) . COMPOSER_EXEC['bin'] . ' update', $output, $returnCode);\r\n    if ($returnCode !== 0)\r\n      $errors['COMPOSER-INIT-UPDATE'] = $output;\r\n\r\n    exec((stripos(PHP_OS, 'WIN') === 0 ? '' : APP_SUDO) . COMPOSER_EXEC['bin'] . ' dump-autoload', $output, $returnCode);\r\n    if ($returnCode !== 0)\r\n      $errors['COMPOSER-DUMP-AUTOLOAD'] = $output;\r\n  }\r\n  \/* Consider writing a gui that would handle the composer traffic ... *\/\r\n\r\n\r\n  \/\/ moved to config.php load (last)\r\n\/\/ is_file(APP_BASE['vendor'] . 'autoload.php') and require_once APP_BASE['vendor'] . 'autoload.php'; \/\/ Include Composer's autoloader\r\n  \r\n  \/*\r\n\r\n  use Composer\\Console\\Application;\r\n  use Symfony\\Component\\Console\\Input\\ArrayInput;\r\n  use Symfony\\Component\\Console\\Output\\BufferedOutput;\r\n\r\n  \/\/ Create a new Composer Application\r\n  $application = new Application();\r\n\r\n  \/\/ Create a BufferedOutput to capture the output\r\n  $output = new BufferedOutput();\r\n\r\n  \/\/ Create an input object with the show command\r\n  $input = new ArrayInput(['command' => 'show']);\r\n\r\n  \/\/ Run the show command and capture the output\r\n  $exitCode = $application->run($input, $output);\r\n\r\n  \/\/ Check if the command was successful\r\n  if ($exitCode === 0) {\r\n      \/\/ Get the captured output and print it\r\n      $outputText = $output->fetch();\r\n      echo $outputText;\r\n  } else {\r\n      \/\/ Handle the case where the command failed\r\n      echo \"Composer show command failed with exit code $exitCode\";\r\n  }\r\n  *\/\r\n  \/*\r\n  \/\/ Use the Composer\\Factory to create a Composer instance\r\n  $composer = \\Composer\\Factory::create();\r\n\r\n  \/\/ Get the installed repository, which contains a list of installed packages\r\n  $repository = $composer->getRepositoryManager()->getLocalRepository();\r\n\r\n  \/\/ Get all installed packages\r\n  $packages = $repository->getPackages();\r\n\r\n  \/\/ Print information about each package\r\n  foreach ($packages as $package) {\r\n      echo $package->getName() . ' - ' . $package->getPrettyVersion() . PHP_EOL;\r\n  }\r\n  *\/\r\n  \/*\r\n  \/\/ Use the Composer\\Factory to create a Composer instance\r\n  $composer = new \\Composer\\Semver\\Semver();\r\n\r\n  \/\/ Get the list of installed packages\r\n  $installedPackages = $composer::getInstalledPackages();\r\n  *\/\r\n  \/*\r\n  \/\/ Use Composer's InstalledVersions class to get a list of installed packages\r\n  $installedPackages = Composer\\InstalledVersions::getAll();\r\n\r\n  \/\/ Print information about each package\r\n  foreach ($installedPackages as $package) {\r\n      echo $package['name'] . ' - ' . $package['version'] . PHP_EOL;\r\n  }\r\n  *\/\r\n\r\n  \/*\r\n  \/\/ Read the installed packages from the installed.json file\r\n  $installedPackages = json_decode(file_get_contents('vendor\/composer\/installed.json'), true);\r\n\r\n  foreach ($installedPackages['packages']  as $package) { \/\/\r\n      echo $package['name'] . ' - ' . $package['version'] . ' - ' . $package['description']. '<br \/>' . PHP_EOL; \/\/ \r\n  }\r\n  *\/\r\n\r\n\r\n  \/* This code starts here *\/\r\n\r\n\r\n\r\n\r\n  \/* Ends here *\/\r\n\r\n\r\n  \/*\r\n\r\n  use Composer\\Composer;\r\n  use Composer\\Factory;\r\n  use Composer\\DependencyResolver\\Request;\r\n  use Composer\\Package\\Version\\VersionSelector;\r\n  use Composer\\Repository\\CompositeRepository;\r\n  use Composer\\Repository\\PlatformRepository;\r\n\r\n  \/\/ Initialize Composer\r\n  $composer = Factory::create();\r\n\r\n  \/\/ Create a repository representing all known packages\r\n  $repositorySet = $composer->getRepositoryManager()->getLocalRepositorySet();\r\n\r\n  \/\/ Create a PlatformRepository to represent the currently installed packages\r\n  $platformRepo = new PlatformRepository();\r\n\r\n  \/\/ Create a CompositeRepository with both the known packages and the installed packages\r\n  $compositeRepo = new CompositeRepository([$platformRepo, $repositorySet->getCanonicalLocalRepository()]);\r\n\r\n  \/\/ Create a Request for the package you're looking to install\r\n  $request = new Request();\r\n  $request->install(['package-name' => '*']);\r\n\r\n  \/\/ Get the latest version of the package\r\n  $versionSelector = new VersionSelector($compositeRepo);\r\n  $latestPackage = $versionSelector->findBestCandidate('package-name');\r\n\r\n  if ($latestPackage !== null) {\r\n      echo 'Package is installable.';\r\n  } else {\r\n      echo 'Package is not installable.';\r\n  }\r\n  *\/\r\n\r\n  \/\/ isset($$c_or_p) and dd($$c_or_p);\r\n  \r\n  \/\/cd \/usr\/local\/bin\r\n\/\/curl -sS https:\/\/getcomposer.org\/installer | php \/* -- --filename=composer *\/\r\n\/\/chmod a+x composer.phar\r\n\/\/sudo mv composer \/usr\/local\/bin\/composer\r\n\/\/Change into a project directory cd \/path\/to\/my\/project\r\n  \r\n\r\n\r\n  \/\/defined('PHP_WINDOWS_VERSION_MAJOR') ? 'APPDATA' : 'HOME';\r\n  \r\n  \/\/require __DIR__ . DIRECTORY_SEPARATOR . APP_BASE['vendor'] . 'Git.php\/src\/Git.php';\r\n\/\/require __DIR__ . DIRECTORY_SEPARATOR . APP_BASE['vendor'] . 'Git.php\/src\/GitRepo.php';\r\n  \r\n  \/\/use Kbjr\\Git\\Git;\r\n\/\/use Kbjr\\Git\\GitRepo;\r\n  \r\n  \/\/ file has to exists first\r\n  \r\n  is_dir(APP_PATH . APP_BASE['var']) || mkdir(APP_PATH . APP_BASE['var'], 0755);\r\n\r\n  if (is_file(APP_PATH . APP_BASE['var'] . 'getcomposer.org.html')) {\r\n    if (ceil(abs((strtotime(date('Y-m-d')) - strtotime(date('Y-m-d', strtotime('+5 days', filemtime(APP_PATH . APP_BASE['var'] . '\/getcomposer.org.html'))))) \/ 86400)) <= 0) {\r\n      $url = 'https:\/\/getcomposer.org\/';\r\n      $handle = curl_init($url);\r\n      curl_setopt($handle, CURLOPT_RETURNTRANSFER, true);\r\n\r\n      if (!empty($html = curl_exec($handle))) {\r\n        file_put_contents(APP_PATH . APP_BASE['var'] . 'getcomposer.org.html', $html) or $errors['COMPOSER_LATEST'] = \"$url returned empty.\";\r\n      }\r\n    }\r\n  } else {\r\n    $url = 'https:\/\/getcomposer.org\/';\r\n    $handle = curl_init($url);\r\n    curl_setopt($handle, CURLOPT_RETURNTRANSFER, true);\r\n\r\n    if (!empty($html = curl_exec($handle))) {\r\n      file_put_contents(APP_PATH . APP_BASE['var'] . 'getcomposer.org.html', $html) or $errors['COMPOSER_LATEST'] = \"$url returned empty.\";\r\n    }\r\n  }\r\n\r\n  libxml_use_internal_errors(true); \/\/ Prevent HTML errors from displaying\r\n  $doc = new DOMDocument(1.0, 'utf-8');\r\n  $doc->loadHTML(file_get_contents(APP_PATH . APP_BASE['var'] . 'getcomposer.org.html'));\r\n\r\n  $content_node = $doc->getElementById(\"main\");\r\n\r\n  $node = getElementsByClass($content_node, 'p', 'latest');\r\n\r\n  \/\/$xpath = new DOMXpath ( $doc ); \/\/$xpath->query ( '\/\/p [contains (@class, \"latest\")]' );\r\n\/\/dd($xpath);\r\n  \r\n  $pattern = '\/Latest: (\\d+\\.\\d+\\.\\d+) \\(\\w+\\)\/';\r\n\r\n  if (preg_match($pattern, $node[0]->nodeValue, $matches)) {\r\n    $version = $matches[1];\r\n\r\n    define('COMPOSER_LATEST', $version);\r\n    \/\/echo \"New Version: \" . COMPOSER_LATEST . \"\\n\";\r\n  } else {\r\n    $errors['COMPOSER_LATEST'] = $node[0]->nodeValue . ' did not match $version';\r\n  }\r\n\r\n  if (defined('COMPOSER_JSON') && !empty(COMPOSER_JSON['json'])) {\r\n    $composer_obj = json_decode(COMPOSER_JSON['json']);\r\n  } else {\r\n    $composer_obj = json_decode(json_encode(new composerConfig(), true));\r\n    $composer_obj->{'require'} = new stdClass(); \/\/(array) ['php' => '7.4||8.1'];\r\n    $composer_obj->{'require'}->{'php'} = '7.4||8.1';\r\n    $composer_obj->{'require-dev'} = new stdClass();\r\n    $composer_obj->{'require-dev'}->{'pds\/skeleton'} = '^1.0';\r\n  }\r\n\r\n  if (defined('COMPOSER_VERSION') && defined('COMPOSER_LATEST')) { \/\/ defined('APP_DEBUG') && APP_DEBUG !== false\r\n  \r\n    \/\/  if (is_file($path = APP_PATH . 'composer.lock') && is_writable($path)) \r\n\/\/    unlink($path);\r\n  \r\n    if (version_compare(COMPOSER_LATEST, COMPOSER_VERSION, '>') != 0) {\r\n\r\n      \/\/dd(basename(COMPOSER_EXEC['bin']) . ' self-update;'); \/\/ (stripos(PHP_OS, 'WIN') === 0 ? '' : APP_SUDO) . \r\n      \/\/(APP_SELF !== APP_PATH_SERVER) and \r\n  \r\n      require_once 'config' . DIRECTORY_SEPARATOR . 'classes' . DIRECTORY_SEPARATOR . 'class.sockets.php';\r\n\r\n      \/\/unset($socketInstance);\r\n      if (!isset($socketInstance)) {\r\n        $socketInstance = Sockets::getInstance();\r\n      }\r\n\r\n      \/\/$socketInstance->handleClientRequest(\"composer self-update\\n\");\r\n  \r\n      if (defined('APP_IS_ONLINE'))\r\n        if (!isset($_SERVER['SOCKET']) || !is_resource($_SERVER['SOCKET']) || empty($_SERVER['SOCKET'])) {\r\n\r\n          $proc = proc_open((stripos(PHP_OS, 'WIN') === 0 ? '' : APP_SUDO . '-u www-data ') . basename(COMPOSER_EXEC['bin']) . ' self-update', [[\"pipe\", \"r\"], [\"pipe\", \"w\"], [\"pipe\", \"w\"]], $pipes);\r\n\r\n          [$stdout, $stderr, $exitCode] = [stream_get_contents($pipes[1]), stream_get_contents($pipes[2]), proc_close($proc)];\r\n\r\n          if ($exitCode !== 0) {\r\n            if (empty($stdout)) {\r\n              if (!empty($stderr)) {\r\n                $errors['COMPOSER-SELF-UPDATE'] = $stderr;\r\n                error_log($stderr);\r\n              }\r\n            } else {\r\n              $errors['COMPOSER-SELF-UPDATE'] = $stdout;\r\n            }\r\n          }\r\n        } else {\r\n          \/\/ Connect to the server\r\n          $errors['server-1'] = \"Connected to Server: \" . SERVER_HOST . ':' . SERVER_PORT . \"\\n\";\r\n\r\n          \/\/ Send a message to the server\r\n          $errors['server-2'] = 'Client request: ' . $message = \"cmd: \" . basename(COMPOSER_EXEC['bin']) . \" self-update\\n\";\r\n          \/* Known socket  Error \/ Bug is mis-handled and An established connection was aborted by the software in your host machine *\/\r\n\r\n          fwrite($_SERVER['SOCKET'], $message);\r\n\r\n          $output[] = trim($message) . ': ';\r\n          \/\/ Read response from the server\r\n          while (!feof($_SERVER['SOCKET'])) {\r\n            $response = fgets($_SERVER['SOCKET'], 1024);\r\n            $errors['server-3'] = \"Server responce: $response\\n\";\r\n            if (isset($output[end($output)]))\r\n              $output[end($output)] .= $response = trim($response);\r\n            \/\/if (!empty($response)) break;\r\n          }\r\n\r\n          \/\/ Close and reopen socket\r\n          fclose($socketInstance->getSocket());\r\n\r\n        }\r\n\r\n      \/\/$proc = proc_open(basename(COMPOSER_EXEC['bin']) . ' self-update;', [[\"pipe\", \"r\"], [\"pipe\", \"w\"], [\"pipe\", \"w\"]], $pipes);\r\n\/*\r\n\r\nif (isset($_POST['composer']['self-update']) || file_exists(APP_PATH . 'composer.phar')) {\r\n  if (!file_exists(APP_PATH . 'composer-setup.php'))\r\n    copy('https:\/\/getcomposer.org\/installer', 'composer-setup.php');\r\n  exec('php composer-setup.php');\r\n}\r\n\r\n\/\/fwrite($pipes[0], \"yes\");\r\n\/\/fclose($pipes[0]);\r\n\r\n$stdout = stream_get_contents($pipes[1]);\r\n$stderr = stream_get_contents($pipes[2]);\r\n\r\nfclose($pipes[1]);\r\nfclose($pipes[2]);\r\n*\/\r\n      \/*\r\n        [$stdout, $stderr, $exitCode] = [stream_get_contents($pipes[1]), stream_get_contents($pipes[2]), proc_close($proc)];\r\n        \r\n        if (empty($stdout)) {\r\n          if (!empty($stderr))\r\n            $errors['COMPOSER_UPDATE'] = $stderr;\r\n        } else $errors['COMPOSER_UPDATE'] = $stdout;\r\n      *\/\r\n    }\r\n\r\n    \/\/die(var_dump($_SERVER['SOCKET']));\r\n  \r\n    if (!is_dir(APP_PATH . APP_ROOT . APP_BASE['vendor']) || !is_file(APP_PATH . APP_ROOT . APP_BASE['vendor'] . 'autoload.php'))\r\n      exec((!defined('APP_SUDO') ?: APP_SUDO) . COMPOSER_EXEC['bin'] . ' dump-autoload', $output, $returnCode) or $errors['COMPOSER-DUMP-AUTOLOAD'] = $output;\r\n    else\r\n      if (!empty($composer_obj->{'require'}))\r\n        foreach ($composer_obj->{'require'} as $package => $version) {\r\n          \/\/ $_ENV['COMPOSER']['EXPR_NAME'] is missing because the clients' env file is overriding the global\r\n          if (preg_match(!isset($_ENV['COMPOSER']['EXPR_NAME']) ? COMPOSER_EXPR_NAME : $_ENV['COMPOSER']['EXPR_NAME'] . 'i', $package))\r\n            continue;  \/\/ $package == 'php'\r\n          elseif (in_array($package, ['php',]))\r\n            continue;\r\n          else {\r\n            \/\/echo $package . ' => ' . $version . \"\\n\" ;\r\n            $errors['COMPOSER-PACKAGE'] = $package . ' does not match the package. reg_expr=' . COMPOSER_EXPR_NAME;\r\n            $output = [];\r\n            $returnCode = 0;\r\n            exec(\"composer show $package\", $output, $returnCode);\r\n\r\n            if ($returnCode !== 0) {\r\n              if (isset($composer_obj->{'require'}->{$package}) && is_dir(APP_PATH . APP_ROOT . APP_BASE['vendor'] . $package))\r\n                continue;\r\n              if (!empty($composer_obj->{'repositories'}))\r\n                foreach ($composer_obj->{'repositories'} as $key => $repo) { \/\/unset($composer_obj->{'repositories'});\r\n                  if (!is_dir(APP_PATH . APP_ROOT . APP_BASE['vendor'] . $package))\r\n                    continue; \/\/ future: consider type->path and\/or checking locally and unsetting.\r\n                  \/\/strcmp(\"git.php\", basename($package) !== 0);\r\n                  if (!in_array(APP_PATH . APP_ROOT . APP_BASE['vendor'] . $package, array_filter(glob(APP_PATH . APP_ROOT . APP_BASE['vendor'] . dirname($package) . '\/*'), 'is_dir')))\r\n                    if ($oldpath = preg_grep('\/^vendor\\\/' . preg_quote($package, '\/') . '\/i', glob(APP_PATH . APP_ROOT . APP_BASE['vendor'] . dirname($package) . '\/*'))[0])\r\n                      rename($oldpath, APP_PATH . APP_ROOT . APP_BASE['vendor'] . $package) or $errors['COMPOSER-INSTALL'] = \"$package has a vendor\/package installed, but the letter case spelling did not pass.\";\r\n                  $repository = new stdClass();\r\n                  $repository->type = 'path';\r\n                  $repository->url = APP_BASE['vendor'] . $package;\r\n                  if ($repository == $repo)\r\n                    continue;\r\n                  else if (!is_dir($repo->url))\r\n                    unset($composer_obj->{'repositories'}[$key]);\r\n                  else\r\n                    $composer_obj->repositories[] = $repository;\r\n                } else {\r\n                $repository = new stdClass();\r\n                $repository->type = 'path';\r\n                $repository->url = APP_BASE['vendor'] . $package;\r\n                if (is_dir($repository->url))\r\n                  $composer_obj->repositories[] = $repository;\r\n              }\r\n            } \/\/ else { }\r\n          }\r\n        }\r\n\r\n    \/\/if (!$composer_obj->{'repositories'}) $composer_obj->{'repositories'} = [];  \r\n    if (isset($composer_obj->{'version'}) && !preg_match(COMPOSER_EXPR_VER, $composer_obj->{'version'}))\r\n      unset($composer_obj->{'version'});\r\n\r\n    \/\/!isset($composer_obj->{'prefer-stable'})\r\n    \/\/  and $composer_obj->{'prefer-stable'} = true;\r\n  \r\n    if (!is_file(COMPOSER_JSON['path']))\r\n      file_put_contents(COMPOSER_JSON['path'], json_encode($composer_obj, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT));\r\n\r\n    \/* Previous unlink('composer.lock') location *\/\r\n\r\n    \/\/if (check_http_status()) {\r\n  \r\n    $vendors = $dirs_diff = [];\r\n\r\n    \/\/$dirs = array_filter( glob( APP_BASE['vendor'] . '*'), 'is_dir');\r\n    if (defined('COMPOSER_VENDORS'))\r\n      foreach (COMPOSER_VENDORS as $vendor => $packages) {\r\n        if ($vendor == basename('bin'))\r\n          continue;\r\n        if ($vendor == 'barrydit')\r\n          continue;\r\n        if (in_array(APP_ROOT . APP_BASE['vendor'] . $vendor, array_filter(glob(APP_ROOT . APP_BASE['vendor'] . $vendor . ''), 'is_dir')))\r\n          continue;\r\n        else\r\n          $dirs_diff[] = basename($vendor);\r\n\r\n        if (!isset($uniqueNames[$vendor])) {\r\n          $uniqueNames[$vendor] = true;\r\n          $vendors[] = $vendor;\r\n        }\r\n      }\r\n\r\n    if (!isset($dirs_diff) || empty($dirs_diff))\r\n      $dirs_diff = [];\r\n    \/\/else \/\/dd($dirs_diff);\r\n  \r\n    if (!empty(array_diff($vendors, $dirs_diff))) {\r\n\r\n      \/\/if (!isset($_SERVER['SOCKET']) || !$_SERVER['SOCKET']) $_SERVER['SOCKET'] = openSocket(APP_HOST, 12345); \/\/ \r\n  \r\n      (APP_SELF !== APP_PATH_SERVER) and $socketInstance = Sockets::getInstance();\r\n      \/\/$socketInstance->handleClientRequest(\"composer self-update\\n\");\r\n      if (!isset($_SERVER['SOCKET']) || !is_resource($_SERVER['SOCKET']) || empty($_SERVER['SOCKET'])) {\r\n\r\n        $proc = proc_open((stripos(PHP_OS, 'WIN') === 0 ? '' : APP_SUDO . '-u www-data ') . basename(COMPOSER_EXEC['bin']) . ' update', [[\"pipe\", \"r\"], [\"pipe\", \"w\"], [\"pipe\", \"w\"]], $pipes);\r\n\r\n        [$stdout, $stderr, $exitCode] = [stream_get_contents($pipes[1]), stream_get_contents($pipes[2]), proc_close($proc)];\r\n\r\n        if ($exitCode !== 0) {\r\n          if (empty($stdout)) {\r\n            if (!empty($stderr)) {\r\n              $errors['COMPOSER-UPDATE'] = $stderr;\r\n              error_log($stderr);\r\n            }\r\n          } else {\r\n            $errors['COMPOSER-UPDATE'] = $stdout;\r\n          }\r\n        }\r\n\r\n        (preg_match('\/Composer is operating significantly slower than normal because you do not have the PHP curl extension enabled.\/m', $stdout))\r\n          and $errors['PHP-ext\/curl'] = \"PHP cURL needs to be installed and enabled.\\n\";\r\n\r\n      } else {\r\n\r\n        $errors['server-1'] = \"Connected to Server: \" . SERVER_HOST . ':' . SERVER_PORT . \"\\n\";\r\n\r\n        \/\/ Send a message to the server\r\n        $errors['server-2'] = 'Client request: ' . $message = \"cmd: \" . basename(COMPOSER_EXEC['bin']) . \" update\\n\";\r\n\r\n        fwrite($_SERVER['SOCKET'], $message);\r\n        $output[] = trim($message) . ': ';\r\n        \/\/ Read response from the server\r\n        while (!feof($_SERVER['SOCKET'])) {\r\n          $response = fgets($_SERVER['SOCKET'], 1024);\r\n          $errors['server-3'] = \"Server responce: $response\\n\";\r\n          if (isset($output[end($output)]))\r\n            $output[end($output)] .= $response = trim($response);\r\n          \/\/if (!empty($response)) break;\r\n        }\r\n        \/\/ Close and reopen socket\r\n        fclose($socketInstance->getSocket());\r\n        \/*\r\n        [$server, $port] = explode(PATH_SEPARATOR, SERVER_HOST . PATH_SEPARATOR . SERVER_PORT); \/\/ 127.0.0.1:12345   \r\n        $errors['server-1'] = \"Connected to Server: \" . $server . PATH_SEPARATOR . $port . \"\\n\"; \/\/ APP_PATH_SERVER || APP_HOST\r\n\r\n        \/\/ Send a message to the server\r\n        $errors['server-2'] = 'Client request: ' . $message = \"cmd: composer update \" . \"\\n\";\r\n\r\n        fwrite($_SERVER['SOCKET'], $message);\r\n\r\n        \/\/ Read response from the server\r\n        while (!feof($_SERVER['SOCKET'])) {\r\n            $response = fgets($_SERVER['SOCKET'], 1024);\r\n            $errors['server-3'] = \"Server response [2]: $response\\n\";\r\n            if (!empty($response)) break;\r\n        }\r\n\r\n        \/\/ Close the connection\r\n        \/\/fclose($_SERVER['SOCKET']);\r\n        *\/\r\n      }\r\n      \/*\r\n              \/\/$proc = proc_open((stripos(PHP_OS, 'WIN') === 0 ? '' : APP_SUDO) . COMPOSER_EXEC['bin'] . ' update', [[\"pipe\", \"r\"], [\"pipe\", \"w\"], [\"pipe\", \"w\"]], $pipes);\r\n\r\n              [$stdout, $stderr, $exitCode] = [stream_get_contents($pipes[1]), stream_get_contents($pipes[2]), proc_close($proc)];\r\n\r\n              if ($exitCode !== 0)\r\n                if (empty($stdout)) {\r\n                  if (!empty($stderr))\r\n                    $errors['COMPOSER-UPDATE'] = $stderr;\r\n                } else $errors['COMPOSER-UPDATE'] = $stdout;\r\n            \/\/else $debug['COMPOSER-UPDATE'] = '$stdout=' $stdout . \"\\n\".  '$stderr = ' . $stderr;\r\n          \r\n              (preg_match('\/Composer is operating significantly slower than normal because you do not have the PHP curl extension enabled.\/m', $stdout))\r\n                and $errors['ext\/curl'] = 'PHP cURL needs to be installed and enabled.';\r\n      *\/\r\n    }\r\n\r\n  }\r\n\r\n  if (!empty($errors) && isset($errors['COMPOSER-UPDATE'])) {\r\n\r\n    $problems = [];\r\n    if (preg_match_all('\/Problem \\d+.*?(?=\\r?\\nProblem \\d+|\\r?\\n$)\/s', $errors['COMPOSER-UPDATE'], $matches)) {\r\n      foreach ($matches[0] as $problem) {\r\n        \/\/ Extract problem ID\r\n        preg_match('\/Problem (\\d+)\/', $problem, $idMatch);\r\n        $problemId = $idMatch[1];\r\n\r\n        \/\/ Extract items under the problem, excluding paths\r\n        preg_match_all('\/- (?!\\\/etc\\\/php\\\/\\d+\\.\\d+\\\/cli\\\/.*\\.ini)(.*?)(?=\\r?\\n(?!\\s*- )|\\r?\\n)\/s', $problem, $itemMatches); \/\/ --$\r\n        $items = array_map('trim', $itemMatches[1]);\r\n\r\n        \/\/ Store the problem ID and its items\r\n        $problems = $items;\r\n      }\r\n\r\n      \/\/ Count of problems\r\n      $problemCount = count($problems);\r\n\r\n      \/\/ Display the results\r\n      $errors['COMPOSER-PROBLEMS'] = \"Total Problems: $problemCount\\n\";\r\n      $errors['COMPOSER-PROBARRAY'] = var_export($problems, true);\r\n    } else {\r\n      $errors['COMPOSER-PROBLEMS'] = \"No problems found.\\n\";\r\n    }\r\n\r\n    if (empty($problems) && preg_match_all('\/Problem \\d+.*?(?=\\r?\\n)$\/s', $errors['COMPOSER-UPDATE'], $matches)) {\r\n      $problems = [];\r\n      foreach ($matches[0] as $problem) {\r\n        \/\/ Extract problem ID\r\n        preg_match('\/Problem (\\d+)\/', $problem, $idMatch);\r\n        $problemId = $idMatch[1];\r\n\r\n        \/\/ Extract items under the problem, excluding paths\r\n        preg_match_all('\/- (?!\\\/etc\\\/php\\\/\\d+\\.\\d+\\\/cli\\\/.*\\.ini)(.*?)(?=\\r?\\n(?!\\s*- )|\\r?\\n)\/s', $problem, $itemMatches); \/\/ --$\r\n        $items = array_map('trim', $itemMatches[1]);\r\n\r\n        \/\/ Store the problem ID and its items\r\n        $problems = $items;\r\n      }\r\n\r\n      \/\/ Count of problems\r\n      $problemCount = count($problems);\r\n\r\n      \/\/ Display the results\r\n      $errors['COMPOSER-PROBLEMS'] = \"Total Problems: $problemCount\\n\";\r\n      $errors['COMPOSER-PROBARRAY'] = var_export($problems, true);\r\n    } else {\r\n      $errors['COMPOSER-PROBLEMS'] = \"No problems found.\\n\";\r\n    }\r\n\r\n    if (preg_match_all('\/To enable extensions, verify that they are enabled in your \\.ini files:.*?(?=\\r?\\n$)\/s', $errors['COMPOSER-UPDATE'], $matches)) {\r\n      $ini_files = [];\r\n      foreach ($matches[0] as $ini_file) {\r\n\r\n        \/\/ Extract items under the problem, excluding paths\r\n        preg_match_all('\/(?=\\\/etc\\\/php\\\/\\d+\\.\\d+\\\/cli\\\/.*\\.ini)(.*?)(?=\\r?\\n(?!\\s*- )|\\r?\\n)\/s', $ini_file, $itemMatches); \/\/ --$\r\n        $items = array_map('trim', $itemMatches[0]);\r\n\r\n        \/\/ Store the problem ID and its items\r\n        $ini_files = $items;\r\n      }\r\n\r\n      $base_names = array_map(function ($path) {\r\n        \/\/ Extract the filename without the extension\r\n        $filename = preg_replace('\/\\.ini$\/', '', basename($path));\r\n        return preg_replace('\/^\\d+-\/', '', $filename);\r\n      }, $ini_files);\r\n\r\n      \/\/ Count of problems\r\n      $ini_files_count = count($base_names);\r\n\r\n      \/\/ Display the results\r\n      $errors['COMPOSER-INI-FILES'] = \"Total Ini Files: $ini_files_count\\n\";\r\n      $errors['COMPOSER-INIARRAY'] = var_export($base_names, true);\r\n    } else {\r\n      $errors['COMPOSER-INI-FILES'] = \"No Ini Files found.\\n\";\r\n    }\r\n\r\n\r\n    if (preg_match('\/^.*Problem \\d*(\\r?\\n)*.*- Root composer\\.json requires ([a-z0-9](?:[_.-]?[a-z0-9]+)*\\\/[a-z0-9](?:(?:[_.]|-{1,2})?[a-z0-9]+)) (\\^v?\\d+(?:\\.\\d+){0,3}|^dev-.*), it is satisfiable by (?:[a-z0-9](?:[_.-]?[a-z0-9]+)*\\\/[a-z0-9](?:(?:[_.]|-{1,2})?[a-z0-9]+))\\[\\d+(?:\\.\\d+){0,3}\\] from composer repo \\((?:[a-z]+\\:\\\/\\\/)?(?:[a-z0-9\\-]+\\.)+[a-z]{2,6}(?:\\\/\\S*)?\\) but (?:[a-z0-9](?:[_.-]?[a-z0-9]+)*\\\/[a-z0-9](?:(?:[_.]|-{1,2})?[a-z0-9]+))\\[(.*)\\]\/m', $errors['COMPOSER-UPDATE'], $matches)) {\r\n      if (preg_match('\/(v?\\d+(?:\\.\\d+){0,3})\/', $matches[4]))\r\n        $composer_obj->require->{$matches[2]} = '^' . $matches[4];\r\n      elseif (preg_match('\/(dev-.*)\/', $matches[4]))\r\n        $composer_obj->require->{$matches[2]} = $matches[4];\r\n\r\n      file_put_contents(COMPOSER_JSON['path'], json_encode($composer_obj, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT));\r\n      unset($errors['COMPOSER-UPDATE']);\r\n    }\r\n\r\n    if (preg_match('\/^.*Problem \\d*(?:\\r?\\n)*.*- Root composer\\.json requires ([a-z0-9](?:[_.-]?[a-z0-9]+)*\\\/[a-z0-9](?:(?:[_.]|-{1,2})?[a-z0-9]+)) (v?\\d+(?:\\.\\d+){0,3}|dev-.*)\\, found ([a-z0-9](?:[_.-]?[a-z0-9]+)*\\\/[a-z0-9](?:(?:[_.]|-{1,2})?[a-z0-9]+))\\s*\\[(v?\\d+(?:\\.\\d+){0,3}|dev-.*)(?:,|$)\/m', $errors['COMPOSER-UPDATE'], $matches)) {\r\n      \/\/ Split the fourth element by commas and extract the first part\r\n      $constraint_parts = explode(', ', $matches[4]);\r\n      $first_element = reset($constraint_parts);\r\n\r\n      if (preg_match('\/(v?\\d+(?:\\.\\d+){0,3})\/', $first_element))\r\n        $composer_obj->require->{$matches[1]} = \"^$first_element\";\r\n      elseif (preg_match('\/(dev-.*)\/', $first_element))\r\n        $composer_obj->require->{$matches[1]} = $first_element;\r\n\r\n      file_put_contents(COMPOSER_JSON['path'], json_encode($composer_obj, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT));\r\n      unset($errors['COMPOSER-UPDATE']);\r\n    }\r\n  }\r\n  \/\/}\r\n  \r\n  \/\/     while() { $errors['COMPOSER-UPDATE'] } \/\/ loop for 5 attempts to fix a problem \r\n  \r\n  if (!is_file('composer.lock')) {\r\n    \/**\r\n      Optimization\r\n    **\/\r\n\r\n    \/\/ composer clear-cache\r\n  \r\n\r\n    putenv('COMPOSER_HOME='); \/\/ TESTING\r\n  \r\n    (APP_SELF !== APP_PATH_SERVER) and $socketInstance = Sockets::getInstance();\r\n    \/\/$socketInstance->handleClientRequest(\"composer self-update\\n\");\r\n    if (!isset($_SERVER['SOCKET']) || !is_resource($_SERVER['SOCKET']) || empty($_SERVER['SOCKET'])) {\r\n      $proc = proc_open((stripos(PHP_OS, 'WIN') === 0 ? '' : APP_SUDO) . COMPOSER_EXEC['bin'] . ' install -o', [[\"pipe\", \"r\"], [\"pipe\", \"w\"], [\"pipe\", \"w\"]], $pipes);\r\n\r\n      [$stdout, $stderr, $exitCode] = [stream_get_contents($pipes[1]), stream_get_contents($pipes[2]), proc_close($proc)];\r\n\r\n      if ($exitCode !== 0) {\r\n        if (empty($stdout)) {\r\n          if (!empty($stderr)) {\r\n            $errors['COMPOSER-INSTALL'] = $stderr;\r\n            error_log($stderr);\r\n          }\r\n        } else {\r\n          $errors['COMPOSER-INSTALL'] = $stdout;\r\n        }\r\n      }\r\n\r\n    } else {\r\n      $errors['server-1'] = \"Connected to Server: \" . SERVER_HOST . ':' . SERVER_PORT . \"\\n\";\r\n\r\n      \/\/ Send a message to the server\r\n      $errors['server-2'] = 'Client request: ' . $message = 'cmd: ' . COMPOSER_EXEC['bin'] . \" install -o\\n\";\r\n      \/* Known socket  Error \/ Bug is mis-handled and An established connection was aborted by the software in your host machine *\/\r\n      fwrite($_SERVER['SOCKET'], $message);\r\n      $output[] = trim($message) . ': ';\r\n      \/\/ Read response from the server\r\n      while (!feof($_SERVER['SOCKET'])) {\r\n        $response = fgets($_SERVER['SOCKET'], 1024);\r\n        $errors['server-3'] = \"Server responce: $response\\n\";\r\n        if (isset($output[end($output)]))\r\n          $output[end($output)] .= $response = trim($response);\r\n        \/\/if (!empty($response)) break;\r\n      }\r\n      \/\/ Close and reopen socket\r\n      fclose($socketInstance->getSocket());\r\n    }\r\n\r\n\r\n\r\n    \/*\r\n        \/\/$proc = proc_open((stripos(PHP_OS, 'WIN') === 0 ? '' : APP_SUDO) . COMPOSER_EXEC['bin'] . ' install -o', array( array(\"pipe\",\"r\"), array(\"pipe\",\"w\"), array(\"pipe\",\"w\")), $pipes);\r\n\r\n        [$stdout, $stderr, $exitCode] = [stream_get_contents($pipes[1]), stream_get_contents($pipes[2]), proc_close($proc)];\r\n\r\n        if ($exitCode !== 0)\r\n          if (empty($stdout)) {\r\n            if (!empty($stderr))\r\n              $errors['COMPOSER-INSTALL'] = $stderr;\r\n          } else $errors['COMPOSER-INSTALL'] = $stdout;\r\n    *\/\r\n    \/\/else $debug['COMPOSER-INSTALL'] = '$stdout=' $stdout . \"\\n\".  '$stderr = ' . $stderr;\r\n  \r\n    \/\/exec((stripos(PHP_OS, 'WIN') === 0 ? '' : APP_SUDO) . COMPOSER_EXEC['bin'] . ' install -o', $output, $returnCode) or $errors['COMPOSER-INSTALL'] = $output;\r\n  \r\n  }\r\n\r\n  \/\/ https:\/\/getcomposer.org\/doc\/03-cli.md\r\n\/\/  $proc = proc_open((stripos(PHP_OS, 'WIN') === 0 ? '' : APP_SUDO) . COMPOSER_EXEC['bin'] . ' validate --no-check-all --no-check-publish --no-check-version --strict', array( array(\"pipe\",\"r\"), array(\"pipe\",\"w\"), array(\"pipe\",\"w\")), $pipes); \/\/ $output = shell_exec(\"cd \" . escapeshellarg(dirname(COMPOSER_JSON['path'])) . \" && \" . APP_SUDO . COMPOSER_EXEC . ' validate --no-check-all --no-check-publish --no-check-version');  dd($output);\r\n  \r\n  \/\/  \".\/composer.json\" does not match the expected JSON schema:  \r\n  \/\/  - NULL value found, but an object is required\r\n  \r\n  \/\/ poss. err '.\/composer.json is valid but your composer.lock has some errors'   checks composer.lock\r\n\/*\r\n  [$stdout, $stderr, $exitCode] = [stream_get_contents($pipes[1]), stream_get_contents($pipes[2]), proc_close($proc)];\r\n\r\n  if ($exitCode !== 0) {\r\n    if (!empty($stdout)) {\r\n      $errors['COMPOSER-VALIDATE'] = $stdout;\r\n\r\n      if (preg_match('\/(?:\\s*)?\\\"\\.\\\/composer\\.json\\\" does not match the expected JSON schema:\/', $stdout))\r\n        $errors['COMPOSER-VALIDATE-JSON'] = false; \/\/'$stdout is empty. $stderr = ' . $stderr;\r\n      \r\n      if (preg_match('\/(?:\\s*)?\\.\\\/composer\\.json is valid but your composer.lock has some errors\/', $stdout)) \/\/ took off \\\"\\\"\r\n        $errors['COMPOSER-VALIDATE-LOCK'] = false; \/\/'$stdout is empty. $stderr = ' . $stderr;\r\n    }\r\n\r\n    if (!empty($stderr)) {\r\n      $errors['COMPOSER-VALIDATE-ERR'] = $stderr;\r\n\r\n      if (preg_match('\/(?:\\s*)?\\\"\\.\\\/composer\\.json\\\" does not contain valid JSON\/', $stderr))\r\n        $errors['COMPOSER-VALIDATE-JSON'] = false; \/\/'$stdout is empty. $stderr = ' . $stderr;\r\n    }\r\n    \/\/dd($errors);\r\n  }\r\n*\/\r\n\r\n\r\n  \/\/if (strpos($output, 'No errors or warnings detected') !== false)\r\n\/\/Deprecated:  strpos(): Passing null to parameter #1 ($haystack) of type string is deprecated\r\n  \r\n  defined('COMPOSER_JSON')\r\n    and define('COMPOSER', ['json' => json_decode(file_get_contents($path = COMPOSER_JSON['path'])), 'path' => $path]);\r\n\r\n  if (isset(COMPOSER['json']->{'require'}) && !empty(COMPOSER['json']->{'require'}))\r\n    foreach (COMPOSER['json']->require as $key => $value) {\r\n      switch ($key) {\r\n        case 'php':\r\n          continue 2;\r\n        default:\r\n          if (isset(COMPOSER['json']->require->{'composer\/composer'}) && $value === COMPOSER['json']->require->{'composer\/composer'}) {\r\n            \/\/echo \"The key is: $key\";\r\n            defined('VENDOR_JSON')\r\n              or define('VENDOR_JSON', ['json' => (is_file(APP_PATH . APP_ROOT . APP_BASE['vendor'] . $key . '\/composer.json') ? file_get_contents(APP_PATH . APP_ROOT . APP_BASE['vendor'] . $key . '\/composer.json') : '{}'), 'path' => APP_PATH . APP_ROOT . APP_BASE['vendor'] . $key . '\/composer.json']);\r\n\r\n            if (realpath(VENDOR_JSON['path']))\r\n              defined('VENDOR_JSON')\r\n                and define('VENDOR', json_decode(file_get_contents(VENDOR_JSON['path'])));\r\n            break 2;\r\n          } else {\r\n            defined('VENDOR_JSON') or define('VENDOR_JSON', ['json' => '{}', 'path' => '']);\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n  \/\/dd(COMPOSER['json']->{'require'}->{'php'}); \r\n  \r\n  if (!defined('VENDOR_JSON') && isset(COMPOSER['json']->{'require'}->{'composer'}))\r\n    define('VENDOR_JSON', [\r\n      'json' => (is_file(APP_PATH . APP_ROOT . APP_BASE['vendor'] . 'composer\/composer.json') ? file_get_contents(APP_PATH . APP_ROOT . APP_BASE['vendor'] . 'composer\/composer.json') : '{}'),\r\n      'path' => APP_PATH . APP_ROOT . APP_BASE['vendor'] . 'composer\/composer.json'\r\n    ]);\r\n\r\n\r\n  \/\/dd(VENDOR_JSON['path']);\r\n  \r\n  \/\/else $errors['COMPOSER-VALIDATE'] = $output;\r\n  \r\n  \/\/dd(get_defined_constants(true)['user']);\r\n\/\/dd(COMPOSER_EXEC . '  ' . COMPOSER_VERSION);\r\n  \r\n\r\n  if (isset($_SERVER['REQUEST_METHOD']) && $_SERVER['REQUEST_METHOD'] == 'POST')\r\n    if (isset($_POST['cmd']) && $_POST['cmd'] != '')\r\n      if (preg_match('\/^composer\\s*(:?.*)\/i', $_POST['cmd'], $match)) {\r\n\r\n        if (!isset($_SERVER['SOCKET']) || !$_SERVER['SOCKET']) {\r\n\r\n          \/\/$output[] = dd(COMPOSER_EXEC);\r\n          $output[] = 'Cmd: ' . (defined('APP_SUDO') ? APP_SUDO . '-u www-data ' : '') . COMPOSER_EXEC['bin'] . ' ' . $match[1];\r\n          $proc = proc_open(\r\n            (defined('APP_SUDO') ? APP_SUDO . '-u www-data ' : '') . COMPOSER_EXEC['bin'] . ' ' . $match[1] . ' --working-dir=\"' . APP_PATH . APP_ROOT . '\"',\r\n            [\r\n              [\"pipe\", \"r\"],\r\n              [\"pipe\", \"w\"],\r\n              [\"pipe\", \"w\"]\r\n            ],\r\n            $pipes\r\n          );\r\n          [$stdout, $stderr, $exitCode] = [stream_get_contents($pipes[1]), stream_get_contents($pipes[2]), proc_close($proc)];\r\n          $output[] = !isset($stdout) ? NULL : $stdout . (isset($stderr) && $stderr === '' ? NULL : \" Error: $stderr\") . (!isset($exitCode) && $exitCode == 0 ? NULL : \" Exit Code: $exitCode\");\r\n          \/\/$output[] = $_POST['cmd'];        \r\n          \/\/exec($_POST['cmd'], $output);\r\n          \/\/die(var_dump($output));\r\n        }\r\n\r\n        if (isset($output) && is_array($output)) {\r\n          switch (count($output)) {\r\n            case 1:\r\n              echo \/*(isset($match[1]) ? $match[1] : 'PHP') . ' >>> ' . *\/ join(\"\\n... <<< \", $output);\r\n              break;\r\n            default:\r\n              echo join(\"\\n\", $output);\r\n              break;\r\n          }\r\n\r\n        }\r\n        Shutdown::setEnabled(true)->setShutdownMessage(function () { })->shutdown();\r\n      }\r\n\r\n  if (basename(dirname(APP_SELF)) == __DIR__ . DIRECTORY_SEPARATOR . 'public') {\r\n    if ($path = realpath((basename(__DIR__) != 'config' ? NULL : __DIR__ . DIRECTORY_SEPARATOR) . 'ui.composer.php')) {\r\n      $app['html'] = require_once $path;\r\n    }\r\n  }\r\n\r\n  unset($output);\r\n"}